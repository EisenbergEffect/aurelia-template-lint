{"version":3,"sources":["projection.spec.ts"],"names":[],"mappings":";AACA,gCAAkD,eAAe,CAAC,CAAA;AAClE,wBAA6B,eAAe,CAAC,CAAA;AAE7C,QAAQ,CAAC,iBAAiB,EAAE;IAE1B,IAAI,MAAM,GAAW,IAAI,sBAAM,CAAC;QAC9B,IAAI,sBAAc,EAAE;KACrB,CAAC,CAAC;IAGH,EAAE,CAAC,2CAA2C,EAAE,CAAC,IAAI;QACnD,MAAM,CAAC,IAAI,CAAC,uDAAuD,CAAC;aACjE,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,CAAC,IAAI;QAC5C,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC;aACnD,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,CAAC,IAAI;QAC7C,MAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC;aAC1D,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEF,EAAE,CAAC,mCAAmC,EAAE,CAAC,IAAI;QAC5C,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC;aAC9C,IAAI,CAAC,CAAC,MAAM;YAEX,MAAM,CAAC,OAAO,CAAC,OAAO;gBACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"projection.spec.js","sourcesContent":["\r\nimport {Linter, Rule, ParseState, RuleError} from 'template-lint';\r\nimport {ProjectionRule} from '../dist/index';\r\n\r\ndescribe(\"Projection Rule\", () => {\r\n\r\n  var linter: Linter = new Linter([\r\n    new ProjectionRule()\r\n  ]);\r\n  \r\n  \r\n  it(\"will reject router-view with tag contents\", (done) => {\r\n    linter.lint('<template><router-view><br/></router-view></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will reject slot with tag contents\", (done) => {\r\n    linter.lint('<template><slot><br/></slot></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will reject slot with text contents\", (done) => {\r\n    linter.lint('<template><slot>hello world!</slot></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n  \r\n   it(\"will accept slot with no contents\", (done) => {\r\n    linter.lint('<template><slot></slot></template>')\r\n      .then((errors) => {\r\n        \r\n        errors.forEach(element => {\r\n          console.log(element);\r\n        });\r\n        expect(errors.length).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n});"],"sourceRoot":"../source"}