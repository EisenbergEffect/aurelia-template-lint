{"version":3,"sources":["template.spec.ts"],"names":[],"mappings":";AACA,gCAAkD,eAAe,CAAC,CAAA;AAClE,wBAAwD,eAAe,CAAC,CAAA;AAExE,QAAQ,CAAC,eAAe,EAAE;IAExB,IAAI,MAAM,GAAW,IAAI,sBAAM,CAAC;QAC9B,IAAI,oBAAY,EAAE;KACnB,CAAC,CAAC;IAED,EAAE,CAAC,mCAAmC,EAAE,CAAC,IAAI;QAC7C,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC;aACjC,IAAI,CAAC,CAAC,MAAM;YAEX,MAAM,CAAC,OAAO,CAAC,OAAO;gBACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,CAAC,IAAI;QAC/C,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;aAC/B,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;YAC/D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,CAAC,IAAI;QACpD,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC;aAC5C,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,CAAC,IAAI;QAC5C,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC;aACtD,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YAC5D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,6BAA6B,EAAE,CAAC,IAAI;QACrC,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC;aACtD,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACxD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,CAAC,IAAI;QAChD,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC;aAC7D,IAAI,CAAC,CAAC,MAAM;YACX,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"template.spec.js","sourcesContent":["\r\nimport {Linter, Rule, ParseState, RuleError} from 'template-lint';\r\nimport {TemplateRule, ProjectionRule, RequireRule} from '../dist/index';\r\n\r\ndescribe(\"Template Rule\", () => {\r\n\r\n  var linter: Linter = new Linter([\r\n    new TemplateRule()\r\n  ]);\r\n  \r\n    it(\"will accept template root element\", (done) => {\r\n    linter.lint('<template></template>')\r\n      .then((errors) => {\r\n        \r\n        errors.forEach(element => {\r\n          console.log(element);\r\n        });\r\n        \r\n        expect(errors.length).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will reject non-template root element\", (done) => {\r\n    linter.lint('<temslat></temslat>')\r\n      .then((errors) => {\r\n        expect(errors[0].message).toBe('root element is not template');\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will ignore html non-template root element\", (done) => {\r\n    linter.lint('<html><temslat></temslat></html>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will reject more than one template\", (done) => {\r\n    linter.lint('<template></template><template></template>')\r\n      .then((errors) => {\r\n        expect(errors[0].message).toBe(\"extraneous template found\");\r\n        done();\r\n      });\r\n  })\r\n  \r\n  it(\"will reject nested template\", (done) => {\r\n    linter.lint('<template><template></template></template>')\r\n      .then((errors) => {\r\n        expect(errors[0].message).toBe(\"nested template found\");\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will pass template with valid contents\", (done) => {\r\n    linter.lint('<template><button></button><div></div></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n});"],"sourceRoot":"../source"}