{"version":3,"sources":["projection.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;AAEb,gCAA0C,eAAe,CAAC,CAAA;AAG1D;;GAEG;AACH,6BAAoC,oBAAI;IAGpC,YAAY,QAAmB;QAC3B,OAAO,CAAC;QAER,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;YACV,QAAQ,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;QAEtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,IAAI,CAAC,MAAiB,EAAE,UAAsB;QAC1C,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QAE7B,IAAI,YAAY,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ;YAC5D,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAErC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;wBACtB,IAAI,KAAK,GAAG,IAAI,yBAAS,CAAC,0CAA0C,GAAG,GAAG,GAAG,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC5H,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;wBACxB,MAAM,CAAC;oBACZ,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACpC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACpC,CAAC;IAEO,WAAW,CAAC,IAAc,EAAE,UAAsB;QACtD,IAAI,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QAI7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;AACL,CAAC;AAzCY,sBAAc,iBAyC1B,CAAA","file":"projection.js","sourcesContent":["\r\n\"use strict\";\r\n\r\nimport {Rule, ParseState, RuleError} from 'template-lint';\r\nimport {SAXParser} from 'parse5';\r\n\r\n/**\r\n *  Rule to ensure root element is the template element\r\n */\r\nexport class ProjectionRule extends Rule {\r\n    private projTags: string[];\r\n\r\n    constructor(projTags?: string[]) {\r\n        super();\r\n\r\n        if (!projTags)\r\n            projTags = ['slot', 'router-view']\r\n\r\n        this.projTags = projTags;\r\n    }\r\n\r\n    init(parser: SAXParser, parseState: ParseState) {\r\n        var self = this;\r\n        var stack = parseState.stack;\r\n        \r\n        let contentCheck = (name, attrs, selfClosing, location, errorStr) => {               \r\n            if (stack.length > 0) {\r\n                let parent = stack[stack.length - 1];\r\n\r\n                self.projTags.forEach(tag => {\r\n                    if (parent.name === tag) {\r\n                        let error = new RuleError(\"found content within projection target (\" + tag + \")\", parent.location.line, parent.location.col);\r\n                         self.reportError(error);\r\n                         return;\r\n                    }\r\n                });\r\n            }              \r\n        };\r\n        \r\n        parser.on('startTag', contentCheck);\r\n        parser.on(\"text\", contentCheck);\r\n    }\r\n\r\n    private parentIsTag(tags: string[], parseState: ParseState): boolean {\r\n        let stack = parseState.stack;\r\n\r\n        \r\n        \r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":"../source"}