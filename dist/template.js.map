{"version":3,"sources":["template.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;AAEb,gCAA0C,eAAe,CAAC,CAAA;AAG1D;;GAEG;AACH,2BAAkC,oBAAI;IAKlC,IAAI,CAAC,MAAiB,EAAE,UAAsB;QAC1C,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ;YAErD,6BAA6B;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,MAAM,CAAC;YACX,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAEb,EAAE,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;oBACrB,IAAI,KAAK,GAAG,IAAI,yBAAS,CAAC,8BAA8B,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;oBACvF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACxB,MAAM,CAAC;gBACX,CAAC;gBAED,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,MAAM,CAAC;YACX,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC9B,IAAI,KAAK,GAAG,IAAI,yBAAS,CAAC,uBAAuB,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAChF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,IAAI,KAAK,GAAG,IAAI,yBAAS,CAAC,2BAA2B,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;wBACpF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;QAEJ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;AACL,CAAC;AAxDY,oBAAY,eAwDxB,CAAA","file":"template.js","sourcesContent":["\r\n\"use strict\";\r\n\r\nimport {Rule, ParseState, RuleError} from 'template-lint';\r\nimport {SAXParser} from 'parse5';\r\n\r\n/**\r\n *  Rule to ensure root element is the template element\r\n */\r\nexport class TemplateRule extends Rule {\r\n    disable:boolean;\r\n    first:boolean;\r\n    count:number;\r\n\r\n    init(parser: SAXParser, parseState: ParseState) {\r\n        var self = this;\r\n        self.disable = false;\r\n        self.first = true;\r\n        self.count = 0;\r\n\r\n        parser.on('startTag', (name, attrs, selfClosing, location) => {\r\n\r\n            // Ignore Full HTML Documents\r\n            if (self.disable || name == 'html') {\r\n                self.disable = true;\r\n                return;\r\n            }\r\n\r\n            if (self.first) {\r\n\r\n                if (name != 'template') {\r\n                    let error = new RuleError(\"root element is not template\", location.line, location.col);\r\n                    self.reportError(error);\r\n                    return;\r\n                }\r\n                \r\n                self.count++;\r\n                self.first = false;\r\n                return;\r\n            }           \r\n\r\n            if (name == 'template') {\r\n                if (self.count > 0) {\r\n                    if (parseState.stack.length > 0) {\r\n                        let error = new RuleError(\"nested template found\", location.line, location.col);\r\n                        self.reportError(error);\r\n                    }\r\n                    else {\r\n                        let error = new RuleError(\"extraneous template found\", location.line, location.col);\r\n                        self.reportError(error);\r\n                    }\r\n                }\r\n                self.count += 1;\r\n            }\r\n        }); \r\n    }\r\n    \r\n    finalise():RuleError[]\r\n    {       \r\n        this.disable = false;\r\n        this.first = true;\r\n        this.count = 0;\r\n        \r\n        return super.finalise();\r\n    }\r\n}\r\n\r\n"],"sourceRoot":"../source"}